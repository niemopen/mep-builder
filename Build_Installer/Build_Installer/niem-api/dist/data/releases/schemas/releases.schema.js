"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NiemChangelogNamespaceSchema = exports.NiemChangelogFacetSchema = exports.NiemChangelogTypeContainsPropertySchema = exports.NiemChangelogTypeSchema = exports.NiemChangelogPropertySchema = exports.NiemTypeUnionSchema = exports.NiemTypeContainsPropertySchema = exports.NiemMetadataSchema = exports.NiemLocalTermSchema = exports.NiemFacetSchema = exports.NiemNamspaceSchema = exports.NiemTypeSchema = exports.NiemPropertySchema = void 0;
const mongoose = require("mongoose");
exports.NiemPropertySchema = new mongoose.Schema({
    Release: Number,
    PropertyNamespacePrefix: String,
    PropertyName: String,
    QualifiedProperty: String,
    IsElement: Number,
    IsAbstract: Number,
    Keywords: String,
    ExampleContent: String,
    UsageInfo: String,
    Definition: String,
    TypeNamespacePrefix: String,
    TypeName: String,
    QualifedType: String,
    SubstitutionGroupPropertyNamespacePrefix: String,
    SubstitutionGroupPropertyName: String,
    SubstitutionGroupQualifiedProperty: String,
});
exports.NiemTypeSchema = new mongoose.Schema({
    Release: Number,
    TypeNamespacePrefix: String,
    TypeName: String,
    QualifiedType: String,
    ContentStyle: String,
    SimpleStyle: String,
    IsMetadata: Number,
    IsAdapter: Number,
    IsAugmentation: Number,
    Keywords: String,
    ExampleContent: String,
    UsageInfo: String,
    Definition: String,
    SimpleTypeNamespacePrefix: String,
    SimpleTypeName: String,
    SimpleQualifiedType: String,
    ParentTypeNamespacePrefix: String,
    ParentTypeName: String,
    ParentQualifiedType: String,
});
exports.NiemNamspaceSchema = new mongoose.Schema({
    Release: Number,
    NamespacePrefix: String,
    NamespaceFile: String,
    VersionURI: String,
    VersionReleaseNumber: String || Number,
    NamespaceStyle: String,
    NamespaceIsExternallyGenerated: String || Number,
    IsConformant: String || Number,
    Definition: String,
});
exports.NiemFacetSchema = new mongoose.Schema({
    Release: Number,
    TypeNamespacePrefix: String,
    TypeName: String,
    QualifiedType: String,
    FacetName: String,
    FacetValue: String,
    Definition: String,
});
exports.NiemLocalTermSchema = new mongoose.Schema({
    Release: Number,
    NamespacePrefix: String,
    LocalTerm: String,
    Literal: String,
    Definition: String,
});
exports.NiemMetadataSchema = new mongoose.Schema({
    Release: Number,
    MetadataTypeNamespacePrefix: String,
    MetadataTypeName: String,
    MetadataQualfiedType: String,
    AppliesToTypeNamespacePrefix: String,
    AppliesToTypeName: String,
    AppliesToQualifiedType: String,
});
exports.NiemTypeContainsPropertySchema = new mongoose.Schema({
    Release: Number,
    TypeNamespacePrefix: String,
    TypeName: String,
    QualifiedType: String,
    PropertyNamespacePrefix: String,
    PropertyName: String,
    QualifiedProperty: String,
    MinOccurs: Number,
    MaxOccurs: String || Number,
    Definition: String,
    SequenceNumber: Number,
});
exports.NiemTypeUnionSchema = new mongoose.Schema({
    Release: Number,
    UnionTypeNamespacePrefix: String,
    UnionTypeName: String,
    UnionQualifiedType: String,
    MemberTypeNamespacePrefix: String,
    MemberTypeName: String,
    MemberQualifiedType: String,
});
exports.NiemChangelogPropertySchema = new mongoose.Schema({
    originalRelease: Number,
    originalNamespace: String,
    originalPropertyName: String,
    changeCode: String,
    issue: String,
    release: Number,
    namespace: String,
    propertyName: String,
    definition: String,
    dataType: String,
    substitutionGroupHead: String,
    elementOrAttribute: String,
    concreteOrAbstract: String,
    isAbstract: String,
});
exports.NiemChangelogTypeSchema = new mongoose.Schema({
    originalRelease: Number,
    originalNamespace: String,
    originalTypeName: String,
    changeCode: String,
    issue: String,
    release: Number,
    namespace: String,
    typeName: String,
    definition: String,
    parentType: String,
    baseType: String,
    contentStyle: String,
    simpleStyle: String,
    isAssociation: Boolean,
    isAugmentation: Boolean,
    isAdapter: Boolean,
    isMetadata: Boolean,
});
exports.NiemChangelogTypeContainsPropertySchema = new mongoose.Schema({
    originalRelease: Number,
    originalNamespace: String,
    originalTypeName: String,
    originalProperty: String,
    changeCode: String,
    issue: String,
    release: Number,
    namespace: String,
    typeName: String,
    property: String,
    minOccurs: Number,
    maxOccurs: String,
});
exports.NiemChangelogFacetSchema = new mongoose.Schema({
    originalRelease: Number,
    originalNamespace: String,
    originalTypeName: String,
    originalFacetValue: String,
    originalDefinition: String,
    changeCode: String,
    issue: String,
    release: Number,
    namespace: String,
    typeName: String,
    facetValue: String,
    definition: String,
    kindOfFacet: String,
});
exports.NiemChangelogNamespaceSchema = new mongoose.Schema({
    originalRelease: Number,
    originalPrefix: String,
    originalVersionNumber: String,
    changeCode: String,
    issue: String,
    draft: String,
    release: Number,
    newPrefix: String,
    newVersionNumber: String,
    newURI: String,
});
//# sourceMappingURL=releases.schema.js.map