import * as mongoose from 'mongoose';
export declare const NiemPropertySchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    Definition?: string;
    Release?: number;
    PropertyNamespacePrefix?: string;
    PropertyName?: string;
    QualifiedProperty?: string;
    IsElement?: number;
    IsAbstract?: number;
    Keywords?: string;
    ExampleContent?: string;
    UsageInfo?: string;
    TypeNamespacePrefix?: string;
    TypeName?: string;
    QualifedType?: string;
    SubstitutionGroupPropertyNamespacePrefix?: string;
    SubstitutionGroupPropertyName?: string;
    SubstitutionGroupQualifiedProperty?: string;
}>;
export declare const NiemTypeSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    Definition?: string;
    Release?: number;
    Keywords?: string;
    ExampleContent?: string;
    UsageInfo?: string;
    TypeNamespacePrefix?: string;
    TypeName?: string;
    QualifiedType?: string;
    ContentStyle?: string;
    SimpleStyle?: string;
    IsMetadata?: number;
    IsAdapter?: number;
    IsAugmentation?: number;
    SimpleTypeNamespacePrefix?: string;
    SimpleTypeName?: string;
    SimpleQualifiedType?: string;
    ParentTypeNamespacePrefix?: string;
    ParentTypeName?: string;
    ParentQualifiedType?: string;
}>;
export declare const NiemNamspaceSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    Definition?: string;
    Release?: number;
    NamespacePrefix?: string;
    NamespaceFile?: string;
    VersionURI?: string;
    VersionReleaseNumber?: string | number;
    NamespaceStyle?: string;
    NamespaceIsExternallyGenerated?: string | number;
    IsConformant?: string | number;
}>;
export declare const NiemFacetSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    Definition?: string;
    Release?: number;
    TypeNamespacePrefix?: string;
    TypeName?: string;
    QualifiedType?: string;
    FacetName?: string;
    FacetValue?: string;
}>;
export declare const NiemLocalTermSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    Definition?: string;
    Release?: number;
    NamespacePrefix?: string;
    LocalTerm?: string;
    Literal?: string;
}>;
export declare const NiemMetadataSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    Release?: number;
    MetadataTypeNamespacePrefix?: string;
    MetadataTypeName?: string;
    MetadataQualfiedType?: string;
    AppliesToTypeNamespacePrefix?: string;
    AppliesToTypeName?: string;
    AppliesToQualifiedType?: string;
}>;
export declare const NiemTypeContainsPropertySchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    Definition?: string;
    MinOccurs?: number;
    MaxOccurs?: string | number;
    Release?: number;
    PropertyNamespacePrefix?: string;
    PropertyName?: string;
    QualifiedProperty?: string;
    TypeNamespacePrefix?: string;
    TypeName?: string;
    QualifiedType?: string;
    SequenceNumber?: number;
}>;
export declare const NiemTypeUnionSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    Release?: number;
    UnionTypeNamespacePrefix?: string;
    UnionTypeName?: string;
    UnionQualifiedType?: string;
    MemberTypeNamespacePrefix?: string;
    MemberTypeName?: string;
    MemberQualifiedType?: string;
}>;
export declare const NiemChangelogPropertySchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    isAbstract?: string;
    dataType?: string;
    definition?: string;
    release?: number;
    namespace?: string;
    originalRelease?: number;
    originalNamespace?: string;
    originalPropertyName?: string;
    changeCode?: string;
    issue?: string;
    propertyName?: string;
    substitutionGroupHead?: string;
    elementOrAttribute?: string;
    concreteOrAbstract?: string;
}>;
export declare const NiemChangelogTypeSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    definition?: string;
    release?: number;
    namespace?: string;
    originalRelease?: number;
    originalNamespace?: string;
    changeCode?: string;
    issue?: string;
    originalTypeName?: string;
    typeName?: string;
    parentType?: string;
    baseType?: string;
    contentStyle?: string;
    simpleStyle?: string;
    isAssociation?: boolean;
    isAugmentation?: boolean;
    isAdapter?: boolean;
    isMetadata?: boolean;
}>;
export declare const NiemChangelogTypeContainsPropertySchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    property?: string;
    release?: number;
    namespace?: string;
    originalRelease?: number;
    originalNamespace?: string;
    changeCode?: string;
    issue?: string;
    originalTypeName?: string;
    typeName?: string;
    originalProperty?: string;
    minOccurs?: number;
    maxOccurs?: string;
}>;
export declare const NiemChangelogFacetSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    definition?: string;
    release?: number;
    namespace?: string;
    originalRelease?: number;
    originalNamespace?: string;
    changeCode?: string;
    issue?: string;
    originalTypeName?: string;
    typeName?: string;
    originalFacetValue?: string;
    originalDefinition?: string;
    facetValue?: string;
    kindOfFacet?: string;
}>;
export declare const NiemChangelogNamespaceSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    release?: number;
    originalRelease?: number;
    changeCode?: string;
    issue?: string;
    originalPrefix?: string;
    originalVersionNumber?: string;
    draft?: string;
    newPrefix?: string;
    newVersionNumber?: string;
    newURI?: string;
}>;
